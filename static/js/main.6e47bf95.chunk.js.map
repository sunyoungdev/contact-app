{"version":3,"sources":["components/PhoneForm.js","components/PhoneInfo.js","components/PhoneInfoList.js","App.js","reportWebVitals.js","index.js"],"names":["PhoneForm","input","React","createRef","inputPhone","state","name","phone","handleChange","e","setState","target","value","handleSubmit","preventDefault","current","props","onCreate","focus","onSubmit","this","className","placeholder","onChange","ref","type","Component","PhoneInfo","editing","handleToggleEdit","info","onUpdate","id","handleRemove","onRemove","nextProps","nextState","console","log","onClick","PhoneInfoList","data","list","map","defaultProps","App","information","keyword","handleCreate","concat","filter","handleUpdate","indexOf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e47bf95.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass PhoneForm extends Component {\n    input = React.createRef();\n    inputPhone = React.createRef();\n\n    state = {\n        name: '',\n        phone: '',\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.input.current.value === '' || this.inputPhone.current.value === '') {\n            return;\n        }\n        this.props.onCreate(this.state);    // state 값 App으로 전달\n        this.setState({ // submit 후 input 초기화\n            name: '',\n            phone: ''\n        })\n        this.input.current.focus();\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} className=\"contact__form\">\n                <input \n                    className=\"contact__input\"\n                    name=\"name\"\n                    placeholder=\"name\" \n                    onChange={this.handleChange} \n                    value={this.state.name} \n                    ref={this.input}\n                />\n                <input \n                    className=\"contact__input\"\n                    name=\"phone\"\n                    placeholder=\"phone number\" \n                    onChange={this.handleChange} \n                    value={this.state.phone}\n                    ref={this.inputPhone} />\n                <button type=\"submit\" className=\"contact__btn\">submit</button>\n            </form>\n        );\n    }\n}\n\nexport default PhoneForm;","import React, { Component, Fragment } from 'react';\n\nclass PhoneInfo extends Component {\n    state = {\n        editing: false,\n        name: '',\n        phone: ''\n    }\n\n    // 업뎃 불필요할 때 렌더함수가 호출되지 않게 하는 LifeCycle API 성능 최적화\n    shouldComponentUpdate(nextProps, nextState) {\n        // return true;    // default \n        // state, info 값이 달라질 때만 true 로 업뎃해 \n        if (this.state !== nextState) {\n            return true;\n        }\n        return this.props.info !== nextProps.info\n    }\n    \n\n    handleToggleEdit = () => {\n        // editing true => false\n            // onUpdate 로 데이터 값 업데이트\n        // false => true\n            // state 에 info 값 넣어주기\n        const { info, onUpdate } = this.props;\n\n        if (this.state.editing) {\n            onUpdate(info.id, {\n                name: this.state.name,\n                phone: this.state.phone\n            });\n        } else {\n            this.setState({\n                name: info.name,\n                phone: info.phone\n            });\n        }\n\n        this.setState({\n            editing: !this.state.editing\n        })\n    }\n\n    // edit시 input 값 바꿔주기\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleRemove = () => {\n        const { info, onRemove } = this.props;\n        onRemove(info.id);\n    }\n\n    render() {\n        // props 로 info 라는 값을 전달받을거고 거기서 name, phone, id 추출\n        const { name, phone, id } = this.props.info;\n        const { editing } = this.state;\n\n        console.log(name);\n\n        return (\n            <li className=\"contact__item\">\n                {\n                    editing ? (\n                        <div className=\"item-info\">\n                            <div>\n                                <input \n                                    name=\"name\"\n                                    onChange={this.handleChange}\n                                    value={this.state.name}\n                                />\n                            </div>\n                            <div>\n                                <input \n                                    name=\"phone\"\n                                    onChange={this.handleChange} \n                                    value={this.state.phone}\n                                />\n                            </div>\n                        </div>\n                    ) : (\n                        <div className=\"item-info\">\n                        <div><b>{name}</b></div>\n                        <div>{phone}</div>\n                        </div>\n                    )\n                }\n                <div className=\"item-btns\">\n                    <button onClick={this.handleRemove} className=\"contact__btn\">delete</button>\n                    <button onClick={this.handleToggleEdit} className=\"contact__btn\">{\n                        editing ? 'save' : 'edit'\n                    }</button>\n                </div>\n            </li>\n        );\n    }\n}\n\nexport default PhoneInfo;","import React, { Component } from 'react';\nimport PhoneInfo from './PhoneInfo';\n\n\nclass PhoneInfoList extends Component {\n    static defaultProps = {     // data 가 없을때 default props 처리\n        data: []\n    }\n\n    render() {\n        const { data, onRemove, onUpdate } = this.props;\n\n        // if (!data) return null; // data 가 없으면 error => null 처리\n\n        // info 데이터를 PhoneInfo component 로 변환\n        const list = data.map(\n            info => (\n                <PhoneInfo \n                    onRemove={onRemove}\n                    onUpdate={onUpdate}\n                    info={info} \n                    key={info.id} />\n            )\n        );\n\n        console.log('rendering list');\n\n        return (\n            <ul className=\"contact__list\">\n                {list}\n            </ul>\n        );\n    }\n}  \n\nexport default PhoneInfoList;","import React, { Component } from 'react';\nimport PhoneForm from './components/PhoneForm';\nimport PhoneInfoList from './components/PhoneInfoList';\nimport './assets/scss/App.scss';\n\nclass App extends Component {\n  id = 3;\n\n  state = {\n    information: [\n      {\n        id: 0,\n        name: 'sun',\n        phone: '07708-802755'\n      },\n      {\n        id: 1,\n        name: 'jun',\n        phone: '07708-802755'\n      },\n      {\n        id: 2,\n        name: 'min',\n        phone: '07708-802755'\n      }\n    ],\n    keyword: ''\n  }\n\n  // keyword 문자열을 바꿔줄 handleChange\n  handleChange = (e) => {\n    this.setState({\n      keyword: e.target.value\n    })\n  }\n\n  handleCreate = (data) => {\n    const { information } = this.state; // 비구조할당을 통해 information의 reference를 가져옴\n    this.setState({\n      information: information.concat({\n        ...data,\n        id: this.id++\n      })\n      // information: information.concat(Object.assign({}, data, {\n      //   id: this.id++\n      // }))\n    })\n  }\n\n  handleRemove = (id) => {\n    const { information } = this.state;\n    this.setState({\n      // parameter로 받은 id가 아닌것들만 필터링 해줘\n      information: information.filter(info => info.id !== id)\n    })\n  }\n\n  handleUpdate = (id, data) => {\n    const { information } = this.state;\n    this.setState({\n      // parameter로 받은 id와 같다면 id, data 넣은 객체 반환해줘\n      information: information.map(info => {\n        if (info.id === id) {\n          return {\n            id,\n            ...data\n          };\n        }\n        return info;\n      })\n    })\n  }\n\n  render() {\n    return (\n      <section className=\"contact\">\n        <h1 className=\"contact__title\">CONTACTS</h1>\n        <PhoneForm onCreate={this.handleCreate} />\n        <input\n          className=\"search\"\n          value={this.state.keyword}\n          onChange={this.handleChange}\n          placeholder=\"search by name...\"\n        />\n        <PhoneInfoList \n          data={this.state.information.filter(\n            info => info.name.indexOf(this.state.keyword) > -1\n          )}\n          onRemove={this.handleRemove}\n          onUpdate={this.handleUpdate}\n        /> \n      </section>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render 특정 id 를 가지고 있는 DOM을 가져와서 여기에 react component를 그리겠다.\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}